# # coding:utf-8
# from __future__ import print_function
# import itertools
#
# capital_country = [
#     [u'希腊', u'雅典'],
#     [u'伊拉克', u'巴格达'],
#     [u'中国', u'北京'],
#     [u'德国', u'柏林'],
#     [u'埃及', u'开罗'],
#     [u'澳大利亚', u'堪培拉'],
#     [u'巴西', u'巴西利亚'],
#     [u'俄罗斯', u'莫斯科'],
#     [u'法国', u'巴黎'],
#     [u'韩国', u'首尔'],
#     [u'西班牙', u'马德里'],
#     [u'泰国', u'曼谷'],
#     [u'日本', u'东京']
# ]
# capital_provience = [
#     [u'甘肃', u'兰州'],
#     [u'宁夏', u'银川'],
#     [u'辽宁', u'沈阳'],
#     [u'湖南', u'长沙'],
#     [u'广东', u'广州'],
#     [u'海南', u'海口'],
#     [u'四川', u'成都'],
#     [u'云南', u'昆明'],
#     [u'西藏', u'拉萨'],
#     [u'陕西', u'西安'],
#     [u'河北', u'石家庄'],
#     [u'山西', u'太原'],
#     [u'山东', u'济南'],
#     [u'湖北', u'武汉'],
#     [u'江苏', u'南京'],
#     [u'浙江', u'杭州']
# ]
# family = [
#     [u'爸爸', u'妈妈'],
#     [u'哥哥', u'姐姐'],
#     [u'弟弟', u'妹妹'],
#     [u'儿子', u'女儿'],
#     [u'孙子', u'孙女'],
#     [u'祖父', u'祖母'],
#     [u'外祖父', u'外祖母'],
#     [u'新郎', u'新娘'],
#     [u'丈夫', u'妻子'],
#     [u'老公', u'老婆'],
#     [u'国王', u'王后'],
#     [u'男人', u'女人'],
#     [u'外甥', u'外甥女'],
#     [u'王子', u'公主'],
#     [u'继父', u'继母'],
#     [u'叔叔', u'阿姨'],
# ]
# opposite = [
#     [u'接受', u'拒绝'],
#     [u'有效', u'无效'],
#     [u'有可能', u'不可能'],
#     [u'正常', u'异常'],
#     [u'特别', u'一般'],
#     [u'遵循', u'违背'],
#     [u'激烈', u'平静'],
#     [u'嘈杂', u'寂静'],
#     [u'进化', u'退化'],
#     [u'清醒', u'糊涂'],
#     [u'熟悉', u'陌生'],
#     [u'增添', u'减少'],
#     [u'坚强', u'软弱'],
#     [u'团结', u'分裂'],
#     [u'坚定', u'犹豫'],
#     [u'复杂', u'简单'],
#     [u'喜欢', u'讨厌'],
#     [u'有趣', u'乏味'],
#     [u'精彩', u'平淡'],
#     [u'仔细', u'马虎'],
#     [u'紧张', u'松弛'],
#     [u'权利', u'义务'],
#     [u'增长', u'减少'],
# ]
# nationality = [
#     [u'中国', u'中国人'],
#     [u'美国', u'美国人'],
#     [u'日本', u'日本人'],
#     [u'泰国', u'泰国人'],
#     [u'法国', u'法国人'],
#     [u'英国', u'英国人'],
#     [u'德国', u'德国人'],
#     [u'韩国', u'韩国人'],
# ]
# currency = [
#     [u'中国', u'人民币'],
#     [u'美国', u'美元'],
#     [u'日本', u'日元'],
#     [u'老挝', u'基普'],
#     [u'柬埔寨', u'瑞尔'],
#     [u'泰国', u'泰铢'],
#     [u'印度', u'卢比'],
#     [u'俄罗斯', u'卢布'],
#     [u'德国', u'马克'],
#     [u'法国', u'法郎'],
#     [u'英国', u'英镑'],
#     [u'加拿大', u'加元'],
# ]
# law = [
#     [u'民初', u'民终', u'初字', u'终字'],
#     [u'原告', u'被告', u'原告方', u'被告方'],
#     [u'当事人', u'代理人', u'涉案人', u'辩护人'],
#     [u'国家级', u'部级', u'省级', u'地级'],
#     [u'自诉人', u'申请人', u'反诉人', u'被申请人'],
#     [u'审判长', u'检察长', u'审判委员会', u'检查委员会'],
#     [u'一审', u'二审', u'审查法院', u'复议法院'],
#     [u'当事人', u'法院', u'协商', u'指定']
# ]
#
# def dict_to_analogy(l):
#     i = list(itertools.permutations(l, 2))
#     result = []
#     for ele in i:
#         result.append(ele[0] + ele[1])
#     return result
#
# analogy_test = dict_to_analogy(capital_country) + dict_to_analogy(capital_provience) + dict_to_analogy(
#     family) + dict_to_analogy(opposite) + dict_to_analogy(nationality) + dict_to_analogy(currency) + law
#
# print(len(analogy_test))
from sympy import *

b0,b1,b2,b3 = symbols('b0,b1,b2,b3')
x1,x2,x3,x4,y1,y2,y3,y4 = symbols('x1,x2,x3,x4,y1,y2,y3,y4')

# eqns =[b0 + b1 * x1 + b2 * x1 ** 2 + b3 * x1 ** 3 - y1,
#        b0 + b1 * x1 + b2 * x1 ** 2 + b3 * x1 ** 3 - y2,
#        b0 + b1 * x1 + b2 * x1 ** 2 + b3 * x1 ** 3 - y3,
#        b0 + b1 * x1 + b2 * x1 ** 2 + b3 * x1 ** 3 - y4]

#solver
A = Matrix([[1,x1, x1**2, x1**3], [1,x2, x2**2, x2**3], [1,x3, x3**2, x3**3], [1,x4, x4**2, x4**3]])
b = Matrix([y1, y2, y3, y4])
para=list(linsolve((A, b), [b0,b1,b2,b3]))

para0=para[0][0]
para1=para[0][1]
para2=para[0][2]
para3=para[0][3]

print(para0)
print(para1)
print(para2)
print(para3)

#testing
def calc_para(para):
    str_expr = str(para)
    expr = sympify(str_expr)
    return expr.subs([(x1,0),(x2,89),(x3,181),(x4,272),(y1,5422.3999939),(y2,5504.6999969),(y3,5570.5921567),(y4,5557.5)])

b0=calc_para(para0)
b1=calc_para(para1)
b2=calc_para(para2)
b3=calc_para(para3)

print(b0)
print(b1)
print(b2)
print(b3)

'''
(-x1*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y4) - (x1 - x4)*(y1 - y2)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2)))*(-((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*(x1**3 + x1**2*(-x1 + x2) - x2**3) + ((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))*(x1**2 + x1*(-x1 + x2) - x2**2)) + (((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3)))*(x1*((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2))*(x1**2 + x1*(-x1 + x2) - x2**2) + (x1*(-y1 + y2) - y1*(-x1 + x2))*((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))))/((x1 - x2)*((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))))
(-((-x1**2 + x2**2)*((-x1 + x2)*(-x1**3 + x3**3) - (-x1 + x3)*(-x1**3 + x2**3)) - (-x1**3 + x2**3)*((-x1 + x2)*(-x1**2 + x3**2) - (-x1 + x3)*(-x1**2 + x2**2)))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y4) - (x1 - x4)*(y1 - y2)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2))) + ((-x1**2 + x2**2)*((-x1 + x2)*(-y1 + y3) - (-x1 + x3)*(-y1 + y2)) - (-y1 + y2)*((-x1 + x2)*(-x1**2 + x3**2) - (-x1 + x3)*(-x1**2 + x2**2)))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))))/((x1 - x2)*((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))))
(-((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y4) - (x1 - x4)*(y1 - y2)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2))) + ((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))))/(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3))))
(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y4) - (x1 - x4)*(y1 - y2)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(y1 - y3) - (x1 - x3)*(y1 - y2)))/(((x1 - x2)*(x1**2 - x3**2) - (x1 - x3)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x4**3) - (x1 - x4)*(x1**3 - x2**3)) - ((x1 - x2)*(x1**2 - x4**2) - (x1 - x4)*(x1**2 - x2**2))*((x1 - x2)*(x1**3 - x3**3) - (x1 - x3)*(x1**3 - x2**3)))
5422.39999390000
0.817113187731877
0.00236998403719996
-1.30441399079980e-5
'''
